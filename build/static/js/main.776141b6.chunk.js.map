{"version":3,"sources":["components/Dashboard.tsx","services/getPodData.ts","hooks/useProfile.ts","components/PodConnecter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Dashboard","webId","useWebId","podData","React","useMemo","profileDoc","describeDocument","isFoundAt","profile","describeSubject","storage","describeContainer","isFoundOn","space","publicTypeIndex","solid","notesTypeRegistration","isEnsuredIn","withRef","rdf","type","TypeRegistration","forClass","schema","TextDigitalDocument","notesDoc","isEnsuredOn","instance","getPodData","undefined","useState","setProfile","useEffect","fetchDocument","then","fetchedProfileDoc","getSubject","useProfile","selectedFile","setSelectedFile","setIsFilePicked","fileClient","SolidFileClient","solidAuth","enableLogging","className","name","getString","foaf","onChange","event","target","files","onClick","fileName","content","contentType","putFile","url","slice","buildFileUrl","catch","href","title","suggestedWebId","URLSearchParams","document","location","search","get","PodConnecter","chosenWebId","setWebId","onSubmit","preventDefault","SolidAuth","login","htmlFor","id","value","e","popup","App","StrictMode","style","padding","paddingLeft","paddingTop","src","alt","marginLeft","marginRight","display","position","left","top","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.776141b6.chunk.js","sourcesContent":["import React, {useState}  from 'react';\nimport { LogoutButton, useWebId } from '@solid/react';\nimport { foaf } from 'rdf-namespaces';\nimport { useProfile } from '../hooks/useProfile';\nimport { NotesList } from './NotesList';\nimport { getPodData } from '../services/getPodData';\nimport SolidFileClient from 'solid-file-client';\nimport * as solidAuth from 'solid-auth-client';\n\nexport const Dashboard: React.FC = () => {\n  const webId = useWebId();\n  const podData = React.useMemo(() => (typeof webId === 'string') ? getPodData(webId) : undefined, [webId]);\n  const profile = useProfile(podData);\n  \n  const [selectedFile, setSelectedFile] = useState();\n  const [isFilePicked, setIsFilePicked] = useState(false);\n  \n  const fileClient = new SolidFileClient(solidAuth, { enableLogging: true });\n\n  const buildFileUrl = (fileName?: string) => {\n    let url = `https://karthik4142.solidcommunity.net/public/NCR/NOLO/${fileName || ''}`;\n    while (url.slice(-1) === '/')\n        url = url.slice(0, -1);\n\n    return url;\n  }\n\n  const updateFile = (fileName: string, content: Blob|string, contentType: string): Promise<Response> => {        \n    return fileClient.putFile(buildFileUrl(fileName), content, contentType)\n        .catch();\n};\n\n\tconst changeHandler = (event: any) => {\n\t\tsetSelectedFile(event.target.files[0]);\n    setIsFilePicked(true);    \n    \n\t};\n\n\tconst handleSubmission = () => {\n    updateFile(selectedFile.name, selectedFile, \"text/plain\");    \n  };\n  \n\n  if (!podData) {\n    return (\n      <section className=\"section\">\n        <p className=\"content\">Loading data&hellip;</p>\n      </section>\n    );\n  }\n\n  const name = (profile) ? profile.getString(foaf.name) : null;\n  const title = (name)\n    ? `Public notes by ${name}`\n    : 'Public notes';\n\n  return <>\n    <section className=\"section\">\n      {/* <h1 className=\"title\">\n        {title}\n      </h1> */}\n      <div> \n      <input type=\"file\" name=\"file\" onChange={changeHandler} />\n\t\t\t<div>\n\t\t\t\t<button onClick={handleSubmission}>Submit</button>\n\t\t\t</div>\n      </div> \n    </section>\n    {/* <NotesList podData={podData}/> */}\n    <footer className=\"footer\">\n      <div className=\"columns\">\n        <p className=\"column content\">\n          <a\n            href=\"https://gitlab.com/vincenttunru/notepod/\"\n            title=\"View the source code on GitLab\"\n          >Source code</a>\n        </p>\n        <div className=\"column has-text-right\">\n          <LogoutButton className=\"button\"/>\n        </div>\n      </div>\n    </footer>\n  </>;\n};\n","import { describeSubject, VirtualDocument, describeDocument, describeContainer, Reference } from 'plandoc';\nimport { space, solid, rdf, schema } from 'rdf-namespaces';\n\nexport type PodData = {\n  webId: Reference,\n  profileDoc: VirtualDocument,\n  publicTypeIndex: VirtualDocument,\n  notesDoc: VirtualDocument,\n};\n\nexport function getPodData(webId: string): PodData {\n  const profileDoc = describeDocument().isFoundAt(webId);\n  const profile = describeSubject().isFoundAt(webId);\n\n  const storage = describeContainer().isFoundOn(profile, space.storage);\n\n  const publicTypeIndex = describeDocument().isFoundOn(profile, solid.publicTypeIndex)\n\n  const notesTypeRegistration = describeSubject()\n    .isEnsuredIn(publicTypeIndex)\n    .withRef(rdf.type, solid.TypeRegistration)\n    .withRef(solid.forClass, schema.TextDigitalDocument);\n\n  const notesDoc = describeDocument()\n    .isEnsuredOn(notesTypeRegistration, solid.instance, storage);\n\n  return {\n    webId,\n    profileDoc,\n    publicTypeIndex,\n    notesDoc,\n  };\n}\n","import React from 'react';\nimport { PodData } from '../services/getPodData';\nimport { TripleSubject, fetchDocument } from 'plandoc';\n\nexport function useProfile(podData?: PodData) {\n  const [profile, setProfile] = React.useState<TripleSubject>();\n\n  React.useEffect(() => {\n    if (!podData) {\n      return;\n    }\n\n    fetchDocument(podData.profileDoc).then((fetchedProfileDoc) => {\n      const profile = fetchedProfileDoc?.getSubject(podData.webId);\n      if (!fetchedProfileDoc || !profile) {\n        return;\n      }\n      setProfile(profile);\n    });\n  }, [podData]);\n\n  return profile;\n}\n","import React from \"react\";\nimport { LoginButton } from \"@solid/react\";\nimport SolidAuth from \"solid-auth-client\";\n\nconst suggestedWebId =\n  URLSearchParams && document.location.search\n    ? new URLSearchParams(document.location.search).get(\"webid\")\n    : null;\n\nexport const PodConnecter: React.FC = () => {\n  const [chosenWebId, setWebId] = React.useState(suggestedWebId);\n\n  if (suggestedWebId) {\n    const login = () => {\n      if (!chosenWebId) {\n        return;\n      }\n      SolidAuth.login(chosenWebId);\n    };\n\n    return (\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          login();\n        }}\n      >\n        <div className=\"field\">\n          <div className=\"control\">\n            <label htmlFor=\"webid\" className=\"label\">\n              Your WebID:\n            </label>\n            <input\n              type=\"url\"\n              name=\"webid\"\n              id=\"webid\"\n              className=\"input is-large\"\n              value={chosenWebId || \"\"}\n              onChange={(e) => {\n                e.preventDefault();\n                setWebId(e.target.value);\n              }}\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <div className=\"control\">\n            <input\n              type=\"submit\"\n              className=\"button is-primary is-large\"\n              value=\"Connect\"\n            />\n          </div>\n        </div>\n      </form>\n    );\n  }\n\n  return (\n    <>\n      <LoginButton popup=\"samplePopup.html\" className=\"button is-large is-primary\">\n        Login with NAAS Buddy\n      </LoginButton>\n    </>\n  );\n};\n","import React from \"react\";\nimport { LoggedOut, LoggedIn } from \"@solid/react\";\nimport { Dashboard } from \"./components/Dashboard\";\nimport { PodConnecter } from \"./components/PodConnecter\";\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <React.StrictMode>\n        <LoggedOut>\n          <section\n            className=\"section\"\n            style={{ padding: 0, paddingLeft: 150, paddingTop: 20 }}\n          >\n            <img\n              src=\"BackgroundImage.png\"\n              alt=\"\"\n              className=\"center\"\n              style={{ marginLeft: 0, marginRight: 0, display: \"block\" }}\n            ></img>\n            <p style={{ position: \"absolute\", left: \"150px\", top: \"580px\" }}>\n              <PodConnecter />\n            </p>\n          </section>\n        </LoggedOut>\n        <LoggedIn>\n          <Dashboard />\n        </LoggedIn>\n      </React.StrictMode>\n    </>\n  );\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}